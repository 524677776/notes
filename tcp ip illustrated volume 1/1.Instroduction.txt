1.1 Introduction

1.2 Layering
	application 
		handles the details of the particular application.
		telnet for remote login.
		ftp the file transfer protocol
		smtp the simple mail transfer protocol for electronic mail 
		snmp the simple network management protocol.
	
	transport
		provides a flow of data between two hosts, for the application layer above.
		
		tcp transmission control protocol.
			provides a reliable flow of data between two hosts.
			dividing the data into appropriately sized chunks for the network layer below.
			
			the application layer can ignore all these detail.
			
		udp user datagram protocol.
			no guarantee that the datagrams reach the other end.
			any desired reliability must be add by the application layer.
		
	
	network
		sometimes called the internet layer.
		handles the movement of packets around the network. 
		routing of packets.
		
		ip internet protocol 
		icmp internet control message protocol 
		igmp internet group management protocol
	
	link
		sometimes called the data-link layer or network interface layer.
		includes the device driver in the operating system and the network interface card in the computer.
		(device driver and the network interface card)
		
	case:
		ftp client			-> telnet ->			ftp server
		
		one protocol allows the two layers to communicate, and another protocol lets the two ip layers communicate.
		
		the application layer is a user progress while the lower three layers are usually implemented in the kernel.
		
		the application layer is concerned with the details of the application and not with the movement of data across the network. the lower three layer know nothing about the application but handle all the communication details.
		
		ethernet <->  router <->  token ring
		
		bridge connect networks at the link layer
		routers connect networks at the network layer
		
		
1.3 TCP/IP Layering
	tcp and udp are the two predominant transport layer protocols. both use ip as the network layer.
	
	tcp provides a reliable transport layer, even though the service it uses ip is unreliable.
	
	udp sends and receives datagrams for application.
		a datagram is a unit of information that travels from the sender to the receiver.
	unlike tcp, udp is unreliable.
	
	ip is the main protocol at the network layer. it is used by both tcp and udp.
	
	icmp is an adjunct to ip, it is used by the ip layer to exchange error message and other vital infomation with the ip layer in another host or router.
	
	igmp is the internet group management protocol. it is used with multicasting(sending a udp datagram to multiple hosts.)
	
	arp address resolution protocol 
	rarp reverse address resolution protocol 
		are used only with certain types of network interfaces to convert between the addresses used by the ip layer and the addresses used by the network insterface.

1.4 Internet Addresses.
	
	a unique internet address called an ip address. 
	32-bit numbers.
	be written as four decimal numbers, one for each byte of the address. called dotted-decimal notation.
	
	the easiest way to diff between the different classes of addresses is to look at the first number of a dotted-decimal address.
	
	interNIC: internet network information center.
	ddn: defense data network
	
	there are three types of ip addresses:
		unicast  - destined for a single host.
		broadcast - destined for all hosts on a given network.
		multicast - destined for a set of hosts that belong to a multicast group.
		
	class A 0-127.
	class B 128-191.
	class C 192-223.
	class D 224-239.
	class E 240-247.
		
1.5 The Domain Name System.
	dns: domain name system is a distributed database that provides the mapping between ip addresses and hostnames.
	
1.6 Encapsulation.
		the unit of data that tcp sends to ip is called a tcp segment.
		the unit of data that ip sends to the network interface is called an ip datagram.
		the stream of bits that flows across the ethernet is called a frame.
		
		the size of an ethernet frame must be between 46 and 1500 bytes.
		
		ip add the ip header that it generates to indicate the layer to which the data belongs.
		ip handles this by storing an 8-bit value in its header called the protocol field.
		value 1 is for ICMP,
		value 2 is for IGMP,
		value 6 indicates TCP,
		value 17 is for UDP.
		
		both tcp and udp use 16-bit port numbers to identify application.
		tcp and udp store the source port number and the destination port number in their respective headers.
		
1.7 Demultiplexing.
		
	ethernet frame  
	-> removed all the headers 
	-> demultiplexing based on frame type in ethernet header 
	-> demultiplexing based on protocol value in ip header
	-> demultiplexing based on destination port number in tcp or udp header

		
1.8 Client-Server Model.
	
	iterative class server:
		1. wait for a cli request to arrive.
		2. process the cli request.
		3. send response back to the client that sent the request.
		4. go back to step1.
		
	concurrent class server:
		1. wait for a cli request to arrive.
		2. start a new server to hanlde this client's request.
			-> this may involve creating a new process, task, or thread, depending on what the underlying operating system supports. how this step is performed depends on the operating system.
		3. this new server handles this cilent's entire request. when complete , this new server terminates.
		4. go back step1.
		
1.9 Port Numbers.
	tcp and udp identify application using 16-bit port numbers.
	
	ftp is on tcp port 21.
	telnet is on tcp port 23.
	tftp (the trivial file transfer protocol) is on udp port 69.
	
	tcp/ip have well-known port numbers between 1 and 1023.
	the well-known ports are managed by the IANA(internet assigned numbers authority).
	
	client port numbers are called ephemeral ports(short lived), since a client exist only as long as the user running the client needs its service.
	
	most tcp/ip implementations allocate ephemeral port number between 1024-5000.
	
	the well-known port numbers are contained in the file /etc/services on most unix systems.
		
	$grep telnet /etc/services
	$grep domain /etc/services
		
	reserved ports are in the range of 1 to 1023.
	only a progress with superuser privileges can assign itself a reserved port.
	can be used by some application as part of the authentication between the client and server.
	
	
1.10 Standardization Process.
		
	ISOC(internet society) 
	IAB(internet architecture board)
	IETE(internet engineering task force)
	IRTF(internet research task force)
	
1.11 RFCs
	rfcs : request for comment.
	
1.12 Standard, Simple Services

1.13 The Internet

	the lowercase internet means multiple networks connected together, using a common protocol suite.
	the uppercase Internet refers to the collection of hosts around the world that can communicate with each other using tcp/ip. 
	
	Internet is an internet, the reverse is not true.
	
1.14 Implementations.
	berkeley-derived implementation to refer to vendor implementations such as sunos 4.x svr4, and aix 3.2 that were originally developed from the berkeley sources.

1.15 Application Programming Interfaces.
	Two popular application programming interface apis for applications unsing tcp/ip protocols are called:
	sockets and tli(transport layer interface).
	
	sockets sometines called "berkeley sockets" indicating where it was originally developed.
	tli sometimes called xti(x/open transport interface), recognizing the work done by x/open.

1.16 Test Network.

1.17 Summary.
	the four layers in the tcp/ip protocol suite : the link layer, network layer, transport layer, application layer.
	the responsibilities of the four layers.
	the network layer provides a hop-by-hop service
	the transport layers provide and end-to-end service.
	
	an internet is a collection of networks.
	the common building block for an internet is a router that connects the networks at the ip layer.
	the capital-I Internet is an internet that spans the globe and consists of more than 10,000 networks and more than one million computers.
	
	on an internet each interface is identified by a unique ip address.
	the dns provides a dynamic mapping between hostnames and ip addresses.
	ports numbers are used to identify the applications communicating with each other
	we said the servers use well-known ports and clients use ephemeral ports.
	
	
	
	
		

		



		
		
		
		
		
		
